# docker-compose.yml - Enterprise RestaurantIQ Stack
services:
  # üóÑÔ∏è PostgreSQL with ARM64 optimization
  postgres:
    image: postgres:15-alpine
    platform: linux/arm64/v8  # M4 Pro optimization
    container_name: restaurantiq-postgres
    environment:
      POSTGRES_DB: restaurantiq
      POSTGRES_USER: restaurantiq
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./backups:/backups  # Local backup mount
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    deploy:
      resources:
        limits:
          memory: 2GB  # MacBook optimized
          cpus: '1.0'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U restaurantiq -d restaurantiq"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - restaurantiq-network
    restart: unless-stopped

  # üîÑ Redis Cache (New)
  redis:
    image: redis:7-alpine
    platform: linux/arm64/v8
    container_name: restaurantiq-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 512MB
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - restaurantiq-network
    restart: unless-stopped

  # üöÄ Backend API Container
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: development  # Hot reload enabled
    platform: linux/arm64/v8
    container_name: restaurantiq-backend
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://restaurantiq:${POSTGRES_PASSWORD:-password123}@postgres:5432/restaurantiq
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-at-least-32-characters-long}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-your-super-secret-refresh-jwt-key-at-least-32-characters-long}
      - LOG_LEVEL=info
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,https://restaurantiq.local}
      - ENABLE_SWAGGER=${ENABLE_SWAGGER:-false}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - PATH=/app/node_modules/.bin:$PATH
    ports:
      - "3000:3000"
    volumes:
      - .:/app:cached
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 4GB  # MacBook optimized
          cpus: '2.0'
        reservations:
          memory: 1GB
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - restaurantiq-network
    restart: unless-stopped
    command: ["npm", "run", "dev"]

  # üé® Frontend Container (Next.js)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: development
    platform: linux/arm64/v8
    container_name: restaurantiq-frontend
    environment:
      - PORT=3001
      - NEXT_PUBLIC_API_URL=http://backend:3000
      - NEXT_PUBLIC_NODE_ENV=development
      - NEXT_PUBLIC_APP_URL=https://restaurantiq.local
      - NODE_ENV=development
    ports:
      - "3001:3001"
    volumes:
      - ./frontend:/app:cached
      - ./frontend/.next:/app/.next
    depends_on:
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2GB
          cpus: '1.0'
        reservations:
          memory: 512MB
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - restaurantiq-network
    restart: unless-stopped

  # üåê Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    platform: linux/arm64/v8
    container_name: restaurantiq-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    command: nginx -c /etc/nginx/nginx.conf
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256MB
          cpus: '0.5'
    networks:
      - restaurantiq-network
    restart: unless-stopped

  # üìä Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    platform: linux/arm64/v8
    container_name: restaurantiq-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    deploy:
      resources:
        limits:
          memory: 1GB
          cpus: '0.5'
    networks:
      - restaurantiq-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    platform: linux/arm64/v8
    container_name: restaurantiq-grafana
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512MB
          cpus: '0.5'
    networks:
      - restaurantiq-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/nginx

networks:
  restaurantiq-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
