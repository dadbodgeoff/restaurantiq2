name: üöÄ Deploy RestaurantIQ

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: 18

jobs:
  # üîç Code Quality Check
  quality:
    name: üîç Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run type-check

      - name: Lint backend
        run: npm run lint

      - name: Lint frontend
        run: cd frontend && npm run lint

      - name: Run tests
        run: npm test -- --passWithNoTests

      - name: Security audit
        run: npm audit --audit-level moderate

  # üê≥ Build Docker Images
  build:
    name: üê≥ Build Images
    needs: quality
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}-backend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # üöÄ Deploy to Environment
  deploy:
    name: üöÄ Deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ inputs.environment || 'staging' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to server
        run: |
          echo "üöÄ Starting deployment to ${{ inputs.environment || 'production' }}"

          # Pull latest changes
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd /opt/restaurantiq

            # Stop existing containers
            docker-compose down

            # Pull latest images
            docker-compose pull

            # Start with new images
            docker-compose up -d

            # Wait for health checks
            sleep 60

            # Check health
            curl -f https://restaurantiq.local/api/v1/health || exit 1

            # Run database migrations if needed
            docker-compose exec -T backend npm run db:migrate

            echo "‚úÖ Deployment successful!"
          EOF

      - name: Health check
        run: |
          sleep 10
          curl -f ${{ secrets.HEALTH_CHECK_URL }} || exit 1

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success
        with:
          status: success
          text: "üöÄ RestaurantIQ deployed successfully to ${{ inputs.environment || 'production' }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # üìä Performance Test
  performance:
    name: üìä Performance Test
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Run K6 performance tests
        uses: k6io/action@v0.1
        with:
          filename: tests/performance/k6-script.js
          flags: --vus 10 --duration 30s

  # üîí Security Scan
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:latest-backend'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
