generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id        String   @id @default(cuid())
  name      String
  timezone  String   @default("America/New_York")
  locale    String   @default("en-US")
  currency  String   @default("USD")
  isActive  Boolean  @default(true)
  settings  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations - Restaurant Isolation
  users     User[]
  menuItems MenuItem[]
  prepDays  PrepDay[]
  snapshots DailySnapshot[]

  @@map("restaurants")
}

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  firstName    String
  lastName     String
  password     String?    // Hashed password field
  role         UserRole
  isActive     Boolean    @default(true)
  lastLoginAt  DateTime?
  failedLoginAttempts Int @default(0)  // Security tracking
  lockedUntil DateTime?                // Account lockout
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Restaurant Isolation - Every user belongs to one restaurant
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  // Permission System Relations
  userPermissions UserPermission[]
  assignedBy      User?   @relation("RoleAssignments", fields: [assignedById], references: [id])
  assignedUsers   User[]  @relation("RoleAssignments")
  assignedById    String?

  // Permission Grants (grantedBy relation)
  grantedPermissions UserPermission[] @relation("PermissionGrants")

  // Password Resets
  passwordResets PasswordReset[]

  @@unique([restaurantId, email])
  @@index([restaurantId, isActive])
  @@index([email])  // For faster email lookups
  @@map("users")
}

enum UserRole {
  OWNER
  ADMIN
  MANAGER
  STAFF
  GUEST
}

// ==========================================
// HIERARCHICAL PERMISSION SYSTEM
// ==========================================

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., 'users.create', 'prep.finalize'
  category    String   // e.g., 'users', 'prep', 'menu'
  action      String   // e.g., 'create', 'read', 'update', 'delete'
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@index([category])
  @@index([isActive])
  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  role         UserRole
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  @@unique([role, permissionId])
  @@index([role])
  @@index([permissionId])
  @@map("role_permissions")
}

model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  grantedById  String?    // User who granted this permission
  grantedBy    User?      @relation("PermissionGrants", fields: [grantedById], references: [id])
  grantedAt    DateTime   @default(now())
  expiresAt    DateTime?  // For temporary permissions
  isActive     Boolean    @default(true)

  @@unique([userId, permissionId])
  @@index([userId])
  @@index([permissionId])
  @@index([isActive])
  @@index([expiresAt])
  @@map("user_permissions")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([token])
  @@index([expiresAt])
  @@map("password_resets")
}

// Menu Management - Restaurant Scoped
model MenuItem {
  id           String   @id @default(cuid())
  name         String
  description  String?
  category     String
  unit         String   @default("each")
  unitCost     Float?
  sellingPrice Float?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Restaurant Isolation - Every menu item belongs to one restaurant
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  // Relations
  prepDayItems PrepDayItem[]

  @@unique([restaurantId, name])
  @@index([restaurantId, isActive, category])
  @@map("menu_items")
}

// PREP Management - Restaurant Scoped
model PrepDay {
  id         String   @id @default(cuid())
  date       DateTime // Business date
  isFinalized Boolean @default(false)
  finalizedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Restaurant Isolation - Every prep day belongs to one restaurant
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  // Relations
  items PrepDayItem[]

  @@unique([restaurantId, date])
  @@index([restaurantId, isFinalized])
  @@map("prep_days")
}

model PrepDayItem {
  id          String     @id @default(cuid())
  par         Int        // Target amount
  onHand      Int        // Current amount
  amountToPrep Int       // Calculated: par - onHand
  status      PrepStatus @default(ACTIVE)
  notes       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations with Restaurant Isolation
  prepDayId   String
  prepDay     PrepDay   @relation(fields: [prepDayId], references: [id], onDelete: Cascade)
  menuItemId  String
  menuItem    MenuItem  @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@index([prepDayId])
  @@index([menuItemId])
  @@map("prep_day_items")
}

// Daily Snapshots - Restaurant Scoped with Integrity
model DailySnapshot {
  id           String          @id @default(cuid())
  snapshotDate DateTime        // Business date (EST)
  status       SnapshotStatus  @default(DRAFT)
  version      Int             @default(1)
  sha256       String?         // Cryptographic hash
  metadata     Json            // { prepItemsCount, menuItemsCount, totalValue }
  data         Json            // Complete snapshot data
  finalizedAt  DateTime?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Restaurant Isolation - Every snapshot belongs to one restaurant
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([restaurantId, snapshotDate])
  @@index([restaurantId, status])
  @@map("daily_snapshots")
}

enum PrepStatus {
  ACTIVE
  INACTIVE
}

enum SnapshotStatus {
  DRAFT
  PENDING
  FINALIZED
  CORRUPTED
}
