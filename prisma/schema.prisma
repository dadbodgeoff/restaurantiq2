generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id        String          @id @default(cuid())
  name      String
  timezone  String          @default("America/New_York")
  locale    String          @default("en-US")
  currency  String          @default("USD")
  isActive  Boolean         @default(true)
  settings  Json            @default("{}")
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  snapshots DailySnapshot[]
  menuItems MenuItem[]
  prepDays  PrepDay[]
  prepItems PrepItem[]
  users     User[]

  @@map("restaurants")
}

model User {
  id                  String           @id @default(cuid())
  email               String           @unique
  firstName           String
  lastName            String
  password            String?
  role                UserRole
  isActive            Boolean          @default(true)
  lastLoginAt         DateTime?
  failedLoginAttempts Int              @default(0)
  lockedUntil         DateTime?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  restaurantId        String
  assignedById        String?
  passwordResets      PasswordReset[]
  grantedPermissions  UserPermission[] @relation("PermissionGrants")
  userPermissions     UserPermission[]
  assignedBy          User?            @relation("RoleAssignments", fields: [assignedById], references: [id])
  assignedUsers       User[]           @relation("RoleAssignments")
  restaurant          Restaurant       @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([restaurantId, email])
  @@index([restaurantId, isActive])
  @@index([email])
  @@map("users")
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  category        String
  action          String
  description     String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@index([category])
  @@index([isActive])
  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  role         UserRole
  permissionId String
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([role, permissionId])
  @@index([role])
  @@index([permissionId])
  @@map("role_permissions")
}

model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  permissionId String
  grantedById  String?
  grantedAt    DateTime   @default(now())
  expiresAt    DateTime?
  isActive     Boolean    @default(true)
  grantedBy    User?      @relation("PermissionGrants", fields: [grantedById], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@index([userId])
  @@index([permissionId])
  @@index([isActive])
  @@index([expiresAt])
  @@map("user_permissions")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
  @@map("password_resets")
}

model MenuItem {
  id           String        @id @default(cuid())
  name         String
  description  String?
  category     String
  unit         String        @default("each")
  unitCost     Float?
  sellingPrice Float?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  restaurantId String
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  prepDayItems PrepDayItem[]

  @@unique([restaurantId, name])
  @@index([restaurantId, isActive, category])
  @@map("menu_items")
}

model PrepDay {
  id           String        @id @default(cuid())
  date         DateTime
  isFinalized  Boolean       @default(false)
  finalizedAt  DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  restaurantId String
  items        PrepDayItem[]
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([restaurantId, date])
  @@index([restaurantId, isFinalized])
  @@map("prep_days")
}

model PrepDayItem {
  id           String     @id @default(cuid())
  par          Int
  onHand       Int
  amountToPrep Int
  status       PrepStatus @default(ACTIVE)
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  prepDayId    String
  menuItemId   String
  menuItem     MenuItem   @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  prepDay      PrepDay    @relation(fields: [prepDayId], references: [id], onDelete: Cascade)

  @@index([prepDayId])
  @@index([menuItemId])
  @@map("prep_day_items")
}

// Missing models referenced by prep.repository.ts
model PrepItem {
  id                String   @id @default(cuid())
  name              String
  category          String
  unit              String   @default("each")
  currentStock      Float    @default(0)
  minThreshold      Float
  maxCapacity       Float
  unitCost          Float
  supplier          String?
  prepTimeHours     Float    @default(2)
  isActive          Boolean  @default(true)
  restaurantId      String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastStockUpdate   DateTime?

  // Relations
  restaurant        Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  stockHistory      PrepStockHistory[]

  // Indexes
  @@unique([name, restaurantId], name: "unique_prep_item_name_per_restaurant")
  @@index([restaurantId, category])
  @@index([restaurantId, isActive])
  @@map("prep_items")
}

model PrepStockHistory {
  id            String   @id @default(cuid())
  prepItemId    String
  quantity      Float
  unit          String
  previousStock Float
  newStock      Float
  reason        String?
  updatedBy     String?  // User ID
  createdAt     DateTime @default(now())

  // Relations
  prepItem      PrepItem @relation(fields: [prepItemId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([prepItemId, createdAt])
  @@map("prep_stock_history")
}

model DailySnapshot {
  id           String         @id @default(cuid())
  snapshotDate DateTime
  status       SnapshotStatus @default(DRAFT)
  version      Int            @default(1)
  sha256       String?
  metadata     Json
  data         Json
  finalizedAt  DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  restaurantId String
  restaurant   Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([restaurantId, snapshotDate])
  @@index([restaurantId, status])
  @@map("daily_snapshots")
}

enum UserRole {
  OWNER
  ADMIN
  MANAGER
  STAFF
  GUEST
}

enum PrepStatus {
  ACTIVE
  INACTIVE
}

enum SnapshotStatus {
  DRAFT
  PENDING
  FINALIZED
  CORRUPTED
}
